name: Build Installer - Linux RPM AMD64

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
        - '**'

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ github.ref == 'refs/heads/main' && github.sha || '' }}
  cancel-in-progress: true

jobs:
  build:
    name: Linux amd64 RPM Installer
    runs-on: ubuntu-latest
    container:
      image: chianetwork/centos7-builder:latest
    timeout-minutes: 40
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    - uses: Chia-Network/actions/git-ssh-to-https@main

    - name: Cleanup any leftovers that exist from previous runs
      run: bash build_scripts/clean-runner.sh || true

    - uses: Chia-Network/actions/enforce-semver@main
      if: startsWith(github.ref, 'refs/tags/')

    # Create our own venv outside of the git directory JUST for getting the ACTUAL version so that install can't break it
    - name: Get version number
      id: version_number
      run: |
        python3 -m venv ../venv
        . ../venv/bin/activate
        pip3 install setuptools_scm
        pip3 install requests
        CHIVES_INSTALLER_VERSION=$(python3 ./build_scripts/installer-version.py)
        CHIVES_INSTALLER_VERSION_NORMALIZED=${CHIVES_INSTALLER_VERSION//-/\.}
        echo "::set-output name=CHIVES_INSTALLER_VERSION::$CHIVES_INSTALLER_VERSION"
        echo "::set-output name=CHIVES_INSTALLER_VERSION_NORMALIZED::$CHIVES_INSTALLER_VERSION_NORMALIZED"
        deactivate

    - name: Test for secrets access
      id: check_secrets
      shell: bash
      run: |
        unset HAS_SECRET
        if [ -n "$SECRET" ]; then HAS_SECRET='true' ; fi
        echo ::set-output name=HAS_SECRET::${HAS_SECRET}
      env:
        SECRET: "${{ secrets.INSTALLER_UPLOAD_SECRET }}"

      # Get the most recent release from chia-plotter-madmax
    - uses: actions/github-script@v6
      id: 'latest-madmax'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const release = await github.rest.repos.getLatestRelease({
            owner: 'Chia-Network',
            repo: 'chia-plotter-madmax',
          });
          return release.data.tag_name;

    - name: Get latest madmax plotter
      run: |
        mkdir "$GITHUB_WORKSPACE/madmax"
        wget -O "$GITHUB_WORKSPACE/madmax/chia_plot" https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot-${{ steps.latest-madmax.outputs.result }}-x86-64
        chmod +x "$GITHUB_WORKSPACE/madmax/chia_plot"
      #  wget -O "$GITHUB_WORKSPACE/madmax/chia_plot_k34" https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot_k34-${{ steps.latest-madmax.outputs.result }}-x86-64
      #  chmod +x "$GITHUB_WORKSPACE/madmax/chia_plot_k34"

      # Get the most recent release from bladebit
    # - uses: actions/github-script@v6
    #   id: 'latest-bladebit'
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     result-encoding: string
    #     script: |
    #       const release = await github.rest.repos.getLatestRelease({
    #         owner: 'Chia-Network',
    #         repo: 'bladebit',
    #       });
    #       return release.data.tag_name;

    # - name: Get latest bladebit plotter
    #   run: |
    #     mkdir "$GITHUB_WORKSPACE/bladebit"
    #     wget -O /tmp/bladebit.tar.gz https://github.com/Chia-Network/bladebit/releases/download/${{ steps.latest-bladebit.outputs.result }}/bladebit-${{ steps.latest-bladebit.outputs.result }}-centos-x86-64.tar.gz
    #     tar -xvzf /tmp/bladebit.tar.gz -C $GITHUB_WORKSPACE/bladebit
    #     chmod +x "$GITHUB_WORKSPACE/bladebit/bladebit"

    - name: Run install script
      env:
        INSTALL_PYTHON_VERSION: ${{ matrix.python-version }}
      run: |
        sh install.sh -d

    - name: Build .rpm package
      env:
        CHIVES_INSTALLER_VERSION: ${{ steps.version_number.outputs.CHIVES_INSTALLER_VERSION }}
      run: |
        ldd --version
        git -C ./chives-blockchain-gui status
        . ./activate
        cd ./build_scripts
        bash build_linux_rpm.sh amd64

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v3
      with:
        name: chives-installers-linux-rpm-intel
        path: ${{ github.workspace }}/build_scripts/final_installer/

    - name: Create Checksums
      if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
      env:
        CHIVES_INSTALLER_VERSION_NORMALIZED: ${{ steps.version_number.outputs.CHIVES_INSTALLER_VERSION_NORMALIZED }}
        CHIVES_INSTALLER_VERSION: ${{ steps.version_number.outputs.CHIVES_INSTALLER_VERSION }}
      run: |
        ls $GITHUB_WORKSPACE/build_scripts/final_installer/
        sha256sum $GITHUB_WORKSPACE/build_scripts/final_installer/chives-blockchain-${CHIVES_INSTALLER_VERSION_NORMALIZED}-1.x86_64.rpm > $GITHUB_WORKSPACE/build_scripts/final_installer/chives-blockchain-${CHIVES_INSTALLER_VERSION_NORMALIZED}-1.x86_64.rpm.sha256
        sha256sum $GITHUB_WORKSPACE/build_scripts/final_installer/chives-blockchain-cli-${CHIVES_INSTALLER_VERSION}-1.x86_64.rpm > $GITHUB_WORKSPACE/build_scripts/final_installer/chives-blockchain-cli-${CHIVES_INSTALLER_VERSION}-1.x86_64.rpm.sha256
        ls $GITHUB_WORKSPACE/build_scripts/final_installer/
